///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Example                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name      := CUBE;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "Cube en 3D";

Section Inherit

  + parent_area:Expanded AREA;

  + parent_g_expr:Expanded G_EXPR;

Section Public

  - angle_x:UINTEGER_8;
  - angle_y:UINTEGER_8;
  - angle_z:UINTEGER_8;

  - tab_sin:FAST_ARRAY(INTEGER_32) :=
  ( + result:FAST_ARRAY(INTEGER_32);
    + r:REAL;
    result := FAST_ARRAY(INTEGER_32).create_with_capacity 256;
    0.to 255 do { i:INTEGER;
      r := (REAL.pi/128*i).sin * 256;
      result.add_last (r.to_integer);
    };
    result
  );
  
  //
  // Width / Height
  //

  - width_min:INTEGER  := 640;

  - height_min:INTEGER := 480;

  //
  // Creation.
  //

  - init p:ABSTRACT_STRING :G_EXPR <-
  (
    TIMER.add_client Self;
    //
    points_2d := FAST_ARRAY(INTEGER).create 16;
    // Init Sin.
    G_RAW.create (Self.fix_height.fix_width)
  );

  - run p:ABSTRACT_STRING :G_WIN_OUT <-
  (
    G_WIN_OUT.create "Cube" with (init p)
  );

  - main <-
  (
    // Init window.
    VIDEO.make_size (width_min+64,height_min+64);
    DESK.make VIDEO with (
      G_OUT.create "Cube" justify (G_OUT.center) / init "./"
    );
  );

  //
  // Update position.
  //

  - set_position rac:AREA at (x,y:INTEGER) size (w,h:INTEGER) <-
  (
    update rac from (x,y) size (w,h);
  );

  //
  // Display.
  //
  
  - points:FAST_ARRAY(INTEGER) := 
  ( + result:FAST_ARRAY(INTEGER);

    result := FAST_ARRAY(INTEGER).create_with_capacity 24;
    result.add_last (-64);
    result.add_last 64;
    result.add_last 64;
    //
    result.add_last 64;
    result.add_last 64;
    result.add_last 64;
    //
    result.add_last 64;
    result.add_last (-64);
    result.add_last 64;
    //
    result.add_last (-64);
    result.add_last (-64);
    result.add_last 64;
    //
    0.to 3 do { i:INTEGER;
      result.add_last (result.item (i*3));
      result.add_last (result.item (i*3+1));
      result.add_last (-64);
    };
    result
  );    
  
  - points_2d:FAST_ARRAY(INTEGER);
  
  - convert_3d_to_2d (x,y,z:INTEGER) :(INTEGER,INTEGER) <-
  ( 
    (x*(65536/(256-z))>>8) + (width_min>>1), 
    (y*(65536/(256-z))>>8) + (height_min>>1)
  );
  
  - draw (x0,y0:INTEGER) to (x1,y1:INTEGER) <-
  ( + x,y:INTEGER;

    clipping (x0,y0) to (x1,y1);
    rectangle_fill (x0,y0) to (x1,y1) color 0;
    
    move_to (points_2d.first,points_2d.second);
    2.to 8 by 2 do { i:INTEGER;      
      x := points_2d.item (i & 7);
      y := points_2d.item ((i & 7) +1);
      line_to (x,y) color 0FF_FF_FFh;
    };

    move_to (points_2d.item 8,points_2d.item 9);
    2.to 8 by 2 do { i:INTEGER;      
      x := points_2d.item ((i & 7) + 8);
      y := points_2d.item ((i & 7) + 9);
      line_to (x,y) color 0FF_FF_FFh;
    };
        
    move_to (points_2d.item 2,points_2d.item 3);
    line_to (points_2d.item 10,points_2d.item 11) color 0FF_FF_FFh;
    line_to (points_2d.item 12,points_2d.item 13) color 0FF_FF_FFh;
    line_to (points_2d.item 4,points_2d.item 5) color 0FF_FF_FFh;
    line_to (points_2d.item 2,points_2d.item 3) color 0FF_FF_FFh;
    
    move_to (points_2d.item 0,points_2d.item 1);
    line_to (points_2d.item 8,points_2d.item 9) color 0FF_FF_FFh;
    line_to (points_2d.item 14,points_2d.item 15) color 0FF_FF_FFh;
    line_to (points_2d.item 6,points_2d.item 7) color 0FF_FF_FFh;
    line_to (points_2d.item 0,points_2d.item 1) color 0FF_FF_FFh;
  );

  //
  // Events.
  //

  - receive msg:EVENT <-
  ( + evt_time:EVENT_TIMER;
    + evt_mouse:EVENT_MOUSE;
    + win:AREA;
    + x0,y0,z0,x1,y1,z1,x,y,j:INTEGER;

    evt_mouse ?= msg;
    (evt_mouse != NULL).if {
      win := DESK.get_object (evt_mouse.x_current,evt_mouse.y_current);
      (win != Self).if {
        DESK.receive msg;
      };
    };

    evt_time ?= msg;
    ((evt_time != NULL) && {evt_time.destination = NULL}).if {
      angle_x := angle_x + 1;
      angle_y := angle_y + 2;
      angle_z := angle_z + 3;
      //
      j := 0;
      
      0.to 24 by 3 do { i:INTEGER;        
        x0 := points.item i;
        y0 := points.item (i+1);
        z0 := points.item (i+2);               
        //
        x1 := (x0*tab_sin.item (angle_z+64) - y0*tab_sin.item angle_z) >> 8;
        y1 := (x0*tab_sin.item angle_z + y0*tab_sin.item (angle_z+64)) >> 8; 
        z1 := z0;
        //
        x1 := (x1*tab_sin.item (angle_y+64) - z1*tab_sin.item angle_y) >> 8;
        y1 := y1;
        z1 := (x1*tab_sin.item angle_y + z1*tab_sin.item (angle_y+64)) >> 8;
        //
        x := x1 + (width_min>>1);
        y := y1 + (height_min>>1);
        //(x,y) := convert_3d_to_2d (x1,y1,z1);
        points_2d.put x to j;
        points_2d.put y to (j+1);
        j := j + 2;
      };
      //
      refresh;
    };

  );

